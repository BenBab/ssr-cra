{"version":3,"sources":["app/routes/profile/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../node_modules/regenerator-runtime/runtime-module.js","../node_modules/regenerator-runtime/runtime.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"names":["frontload","_ref","Object","C_Users_Ben_Documents_Web_Development_ssr_cra_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_6__","C_Users_Ben_Documents_Web_Development_ssr_cra_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_5___default","a","mark","_callee","props","wrap","_context","prev","next","getCurrentProfile","match","params","id","abrupt","sent","stop","this","_x","apply","arguments","Profile","removeCurrentProfile","nextProps","_this$props$currentPr","currentProfile","name","image","react__WEBPACK_IMPORTED_MODULE_7___default","createElement","_components_page__WEBPACK_IMPORTED_MODULE_11__","title","description","concat","src","alt","style","width","Component","connect","state","profile","dispatch","bindActionCreators","frontloadConnect","onMount","onUpdate","module","exports","__webpack_require__","g","self","Function","hadRuntime","regeneratorRuntime","getOwnPropertyNames","indexOf","oldRuntime","undefined","e","global","Op","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","inModule","runtime","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","call","Gp","GeneratorFunctionPrototype","Generator","create","GeneratorFunction","constructor","displayName","isGeneratorFunction","genFun","ctor","setPrototypeOf","__proto__","awrap","arg","__await","defineIteratorMethods","AsyncIterator","async","innerFn","outerFn","tryLocsList","iter","then","result","done","value","toString","keys","object","key","push","reverse","length","pop","Context","reset","skipTempReset","_sent","delegate","method","tryEntries","forEach","resetTryEntry","charAt","isNaN","slice","rootRecord","completion","type","rval","dispatchException","exception","context","handle","loc","caught","record","i","entry","tryLoc","hasCatch","hasFinally","catchLoc","finallyLoc","Error","finallyEntry","complete","afterLoc","finish","catch","thrown","delegateYield","iterable","resultName","nextLoc","protoGenerator","generator","_invoke","doneResult","delegateResult","maybeInvokeDelegate","tryCatch","makeInvokeMethod","fn","obj","err","previousPromise","callInvokeWithMethodAndArg","Promise","resolve","reject","invoke","unwrapped","error","return","TypeError","info","pushTryEntry","locs","iteratorMethod","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","d","__webpack_exports__"],"mappings":"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","file":"static/js/profile.22f681fa.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { frontloadConnect } from 'react-frontload';\r\nimport Page from '../../components/page';\r\n\r\nimport {\r\n  getCurrentProfile,\r\n  removeCurrentProfile\r\n} from '../../../modules/profile';\r\n\r\nconst frontload = async props =>\r\n  await props.getCurrentProfile(+props.match.params.id);\r\n\r\nclass Profile extends Component {\r\n  componentWillUnmount() {\r\n    this.props.removeCurrentProfile();\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps) {\r\n    if (nextProps.match.params.id !== this.props.match.params.id) {\r\n      this.props.getCurrentProfile(+nextProps.match.params.id);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  render() {\r\n    const { name, id, image } = this.props.currentProfile;\r\n\r\n    return (\r\n      <Page\r\n        id=\"profile\"\r\n        title={name}\r\n        description={`This is user profile number ${id}`}\r\n        image={image}\r\n      >\r\n        <p>\r\n          <b>Name:</b> {name}\r\n        </p>\r\n        <p>\r\n          <b>ID:</b> {id}\r\n        </p>\r\n        <img src={image} alt={name} style={{ width: '400px' }} />\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  currentProfile: state.profile.currentProfile\r\n});\r\n\r\nconst mapDispatchToProps = dispatch =>\r\n  bindActionCreators({ getCurrentProfile, removeCurrentProfile }, dispatch);\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(\r\n  frontloadConnect(frontload, {\r\n    onMount: true,\r\n    onUpdate: false\r\n  })(Profile)\r\n);\r\n","module.exports = require(\"regenerator-runtime\");\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = function () {\n  return this || typeof self === \"object\" && self;\n}() || Function(\"return this\")(); // Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\n\n\nvar hadRuntime = g.regeneratorRuntime && Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0; // Save the old regeneratorRuntime in case it needs to be restored later.\n\nvar oldRuntime = hadRuntime && g.regeneratorRuntime; // Force reevalutation of runtime.js.\n\ng.regeneratorRuntime = undefined;\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch (e) {\n    g.regeneratorRuntime = undefined;\n  }\n}","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n!function (global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    } // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n\n\n    return;\n  } // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n\n\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n    return generator;\n  }\n\n  runtime.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n\n  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n\n  function Generator() {}\n\n  function GeneratorFunction() {}\n\n  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n\n\n  var IteratorPrototype = {};\n\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = \"GeneratorFunction\"; // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      prototype[method] = function (arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function (genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n    // do is to check its .name property.\n    (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n  };\n\n  runtime.mark = function (genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  }; // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n\n\n  runtime.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n\n        if (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function (value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function (err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function (unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function (error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise = // If enqueue has been called before, then we want to wait until\n      // all previous Promises have been resolved before calling invoke,\n      // so that results are always delivered in the correct order. If\n      // enqueue has not been called before, then it is important to\n      // call invoke immediately, without waiting on a callback to fire,\n      // so that the async generator function has the opportunity to do\n      // any necessary setup in a predictable way. This predictability\n      // is why the Promise constructor synchronously invokes its\n      // executor callback, and why async functions synchronously\n      // execute code before the first await. Since we implement simple\n      // async functions in terms of async generators, it is especially\n      // important to get this right, even though it requires care.\n      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n      // invocations of the iterator.\n      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    } // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n\n\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n\n  runtime.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n\n  runtime.async = function (innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));\n    return runtime.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n    : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        } // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n        var record = tryCatch(innerFn, self, context);\n\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted; // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  } // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n\n\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (!info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n      context.next = delegate.nextLoc; // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    } // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n\n\n    context.delegate = null;\n    return ContinueSentinel;\n  } // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n\n\n  defineIteratorMethods(Gp);\n  Gp[toStringTagSymbol] = \"Generator\"; // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n\n  Gp[iteratorSymbol] = function () {\n    return this;\n  };\n\n  Gp.toString = function () {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function (object) {\n    var keys = [];\n\n    for (var key in object) {\n      keys.push(key);\n    }\n\n    keys.reverse(); // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      } // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n\n\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n            next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n          return next;\n        };\n\n        return next.next = next;\n      }\n    } // Return an iterator with no values.\n\n\n    return {\n      next: doneResult\n    };\n  }\n\n  runtime.values = values;\n\n  function doneResult() {\n    return {\n      value: undefined,\n      done: true\n    };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      this.prev = 0;\n      this.next = 0; // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n      this.method = \"next\";\n      this.arg = undefined;\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n    stop: function stop() {\n      this.done = true;\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" || record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n\n          return thrown;\n        }\n      } // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n\n\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n}( // In sloppy mode, unbound `this` refers to the global object, fallback to\n// Function constructor if we're in global strict mode. That is sadly a form\n// of indirect eval which violates Content Security Policy.\nfunction () {\n  return this || typeof self === \"object\" && self;\n}() || Function(\"return this\")());","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"sourceRoot":""}